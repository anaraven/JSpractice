{{Infobox software
| name                   = Data-Driven Documents (D3.js)
| title                  = 
| logo                   = Logo D3.svg
| logo caption           = 
| logo_size              = 100px
| logo_alt               = 
| screenshot             = <!-- Image name is enough -->
| caption                = 
| screenshot_size        = 
| screenshot_alt         = 
| collapsible            = 
| author                 = 
| developer              = [[Mike Bostock]], [[Jeffrey Heer]], Vadim Ogievetsky, and community
| released               = {{Start date and age|2011|02|18|df=yes}}
| discontinued           = 
| latest release version = 4.4.0
| latest release date    = {{Start date and age|2016|11|22|df=yes/no}}<ref>{{cite web|title=d3 Releases|url=https://github.com/mbostock/d3/releases|website=Github.com|accessdate=November 29, 2016}}</ref>
| latest preview version = 
| latest preview date    = <!-- {{Start date and age|YYYY|MM|DD|df=yes/no}} -->
| status                 = Active
| programming language   = [[JavaScript]]
| operating system       = 
| platform               = 
| size                   = 
| language               = 
| language count         = <!-- DO NOT include this parameter unless you know what it does -->
| language footnote      = 
| genre                  = [[Data visualization]], [[JavaScript library]]
| license                = [[BSD License|BSD]]
| alexa                  = 
| website                = {{URL|d3js.org}}
| standard               = 
| AsOf                   = 
}}
{{Portal|Free software}}
'''D3.js''' (or just '''D3''' for '''Data-Driven Documents''') is a [[JavaScript]] library for producing dynamic, interactive [[data visualization]]s in [[web browser]]s. It makes use of the widely implemented [[Scalable Vector Graphics|SVG]], [[HTML5]], and [[Cascading Style Sheets|CSS]] standards. It is the successor to the earlier [http://mbostock.github.io/protovis/ Protovis] framework.<ref>{{citation |url=http://mbostock.github.com/d3/tutorial/protovis.html |title=For Protovis Users|website=Mbostock.github.com|accessdate=August 18, 2012 }}</ref> In contrast to many other libraries, D3.js allows great control over the final visual result.<ref name="Viau_2012/06">{{citation |url=http://www.datameer.com/blog/author/cviau |title=What’s behind our Business Infographics Designer? D3.js of course |last=Viau |first=Christophe |work=[[Datameer]]'s blog |date=June 26, 2012 |accessdate=August 18, 2012 }}</ref> Its development was noted in 2011,<ref>{{citation |url=https://books.google.com/books?id=nTpjoNgJQOMC |title=Making Sense of Data III: A Practical Guide to Designing Interactive Data Visualizations |first1=Glenn J. |last1=Myatt |first2= Wayne P. |last2=Johnson |chapter-url=https://books.google.com/books?id=nTpjoNgJQOMC&pg=SL1-PA2 |chapter=5.10 Further reading |page=A–2 |publisher=[[John Wiley & Sons]] |place=Hoboken, New Jersey |date=September 2011 |isbn=978-0-470-53649-0|accessdate=January 23, 2013 }}</ref> as version 2.0.0 was released in August 2011.<ref>{{citation |url=https://github.com/mbostock/d3/wiki/Release-Notes |title=Release Notes |work=D3.js |accessdate=August 22, 2012 }}</ref>

Data visualization company [[Datameer]] officially uses D3.js as its core technology,<ref name="Viau_2012/06" /> while ''[[The New York Times]]'' sometimes uses it for rich graphs.<ref>{{cite news|title=The Facebook Offering: How It Compares|url=http://www.nytimes.com/interactive/2012/05/17/business/dealbook/how-the-facebook-offering-compares.html |first1=Jeremy|last1=Ashkenas|first2=Matthew|last2=Bloch|first3=Shan|last3=Carter|first4=Amanda|last4=Cox|date=May 17, 2012 |publisher=Nytimes.com |accessdate=January 23, 2013}}</ref> It is used by the ''iD'' editor for editing [[OpenStreetMap]].<ref>{{cite web | url=https://www.mapbox.com/blog/id-increases-participation/ | title=New OpenStreetMap Editor iD Increases Participation|website=Mapbox.com | accessdate=26 December 2013}}</ref><ref>{{cite web | url=http://wiki.openstreetmap.org/wiki/ID | title=iD | publisher=OpenStreetMap wiki | accessdate=26 December 2013}}</ref> D3.js has been extensively used for [[GIS]] [[web mapping|map making]], managing both [[GeoJSON]] and [[Topojson]] files as input.

== Context ==
The first web browsers appeared in the early 1990s. They were initially capable of displaying static web pages only: the only way for a user to interact with the web was through clicking links and scrolling pages. There were many efforts to overcome such limitations. One of the most significant was the integration of [[JavaScript]] as the scripting language for web browsers. JavaScript gradually became the de facto standard language for creating web pages with rich user interactivity. This played a crucial role in the decision to use JavaScript as the language of D3.js.

At the same time, researchers, engineers, and practitioners from various branches of engineering and science looked for tools that would enable web browsers to visually present data within web pages. There were multiple projects with that goal, each of which had its successes and failures, and inspired the subsequent ones. The most notable examples were the Prefuse, Flare, and Protovis toolkits, which can all be considered as direct predecessors of D3.js.

[[Prefuse]] was a visualization toolkit created in 2005 that required usage of [[Java (software platform)|Java]], and visualizations were rendered within browsers with a Java plug-in. Flare was a similar toolkit from 2007 that used [[ActionScript]], and required a Flash plug-in for rendering.

In 2009, based on the experience of developing and utilizing Prefuse and Flare, Professor Jeff Heer, Ph.D. student [[Mike Bostock]], and M.S. student Vadim Ogievetsky of [[Stanford University]]'s Stanford Visualization Group created [[Protovis]], a JavaScript library to generate SVG graphics from data. The library received notable acceptance both by data visualization practitioners and academics.<ref>Academic example: {{citation|last1=Savva|first1=Manolis|last2=Kong|first2=Nicholas|last3=Chhajta|first3=Arti|last4=Li|first4=Feifei|last5=Agrawala|first5=Maneesh|last6=Heer|first6=Jeffrey|title=ReVision: Automated Classification, Analysisand Redesign of Chart Images|journal=ACM User Interface Software & Technology|year=2011|url=http://vis.stanford.edu/papers/revision |accessdate=January 23, 2013}}</ref>

In 2011, the development of Protovis was stopped to focus on a new project, D3.js. Informed by experiences with Protovis, Bostock, along with Heer and Ogievetsky, developed D3.js to provide a more expressive framework that, at the same time, focuses on web standards and provides improved performance.<ref>({{harvnb|Bostock|Ogievetsky|Heer|2011}})</ref>

== Technical principles ==
Embedded within an [[HTML]] webpage, the JavaScript D3.js library uses pre-built JavaScript functions to select elements, create SVG objects, style them, or add transitions, dynamic effects or [[tooltip]]s to them. These objects can also be widely styled using CSS. Large datasets can be easily bound to SVG objects using simple D3.js functions to generate rich text/graphic charts and diagrams. The data can be in various formats, most commonly [[JSON]], [[comma-separated values]] (CSV) or [[geoJSON]], but, if required, JavaScript functions can be written to read other data formats.

=== Selections ===
The central principle of D3.js design is to enable the programmer to first use a CSS-style selector to select a given set of [[Document Object Model]] (DOM) nodes, then use operators to manipulate them in a similar manner to [[jQuery]].<ref>[{{harvnb|Bostock|Ogievetsky|Heer|2011}}, chap. 3</ref> For example, by using D3.js, one may select all HTML {{tag|p}} elements, and then change their text color, e.g. to lavender:

<source lang="javascript">
 d3.selectAll("p")                 // select all <p> elements
   .style("color", "lavender")     // set style "color" to value "lavender"
   .attr("class", "squares")       // set attribute "class" to value "squares"
   .attr("x", 50);                 // set attribute "x" (horizontal position) to value 50px
</source>

The selection can be based on tag (as in the above example), class, identifier, attribute, or place in the hierarchy. Once elements are selected, one can apply operations to them. This includes getting and setting attributes, display texts, and styles (as in the above example). Elements may also be added and removed. This process of modifying, creating and removing HTML elements can be made dependent on data, which is the basic concept of D3.js.

=== Transitions ===
By declaring a transition, values for attributes and styles can be smoothly interpolated over a certain time. The following code will make all HTML {{tag|p}} elements on a page gradually change their text color to pink:

<source lang="javascript">
 d3.selectAll("p")             // select all <p> elements
   .transition("trans_1")      // transition with name "trans_1"
     .delay(0)                 // transition starting 0ms after trigger
     .duration(500)            // transitioning during 500ms
     .ease("linear")           // transition easing progression is linear...
   .style("color", "pink");    // ... to color:pink
</source>

=== Data-binding ===
For more advanced uses, loaded data drives the creation of elements. D3.js loads a given dataset, then, for each of its elements, creates an SVG object with associated properties (shape, colors, values) and behaviors (transitions, events).<ref>{{citation|date=February 5, 2012|first=Mike|last=Bostock|title=Thinking with Joins|url=http://bost.ocks.org/mike/join/}}</ref><ref>{{cite web|url=http://codepen.io/hugolpz/pen/wBorvq |title=A Pen by Lopez Hugo |website=Codepen.io |date= |accessdate=2016-08-01}}</ref><ref>{{cite web|author= |url=http://jsfiddle.net/9sggtr7a/ |title=Edit fiddle |website=JSFiddle.net |date= |accessdate=2016-08-01}}</ref>

<source lang="javascript">
// Data
  var data = [
     { name:"Ireland",  income:53000, life: 78, pop:6378, color: "green"},
     { name:"Norway",   income:73000, life: 87, pop:5084, color: "blue" },
     { name:"Tanzania", income:27000, life: 50, pop:3407, color: "grey" }
  ];
// Create SVG container
  var svg = d3.select("#hook").append("svg")
        .attr("width", 120)
        .attr("height", 120)
        .style("background-color", "#D0D0D0");
// Create SVG elements from data 
    svg.selectAll("circle")                  // create virtual circle template
      .data(data)                            // bind data
    .enter()                                 // for each row in data...
      .append("circle")                      // bind circle & data row such that... 
        .attr("id", function(d) { return d.name })           // set the circle's id according to the country name
        .attr("cx", function(d) { return d.income /1000  })  // set the circle's horizontal position according to income 
        .attr("cy", function(d) { return d.life })           // set the circle's vertical position according to life expectancy 
        .attr("r",  function(d) { return d.pop /1000 *2 })   // set the circle's radius according to country's population 
        .attr("fill",function(d){ return d.color });         // set the circle's color according to country's color
</source>

Generated SVG graphics are designed according to the provided data.

=== Appending nodes using data ===
Once a dataset is bound to a document, use of D3.js typically follows a pattern wherein an explicit <code>.enter()</code> function, an implicit "update," and an explicit <code>.exit()</code> function is invoked for each item in the bound dataset. Any [[method chaining|methods chained]] after the <code>.enter()</code> command will be called for each item in the dataset not already represented by a DOM node in the selection (the previous <code>selectAll()</code>). Likewise, the implicit update function is called on all existing selected nodes for which there is a corresponding item in the dataset, and <code>.exit()</code> is called on all existing selected nodes that do not have an item in the dataset to bind to them. The D3.js documentation provides several examples of how this works.<ref>{{cite web|url=http://mbostock.github.io/d3/tutorial/circle.html |title=Three Little Circles |website=Mbostock.github.io |accessdate=2016-08-01}}</ref>

== API structure ==
D3.js API contains several hundred functions, and they can be grouped into following logical units:<ref>{{cite web|author=d3 |url=https://github.com/mbostock/d3/wiki/API-Reference |title=API Reference · d3/d3 Wiki · GitHub |website=Github.com |date=2016-06-30 |accessdate=2016-08-01}}</ref>
* Selections
* Transitions
* Arrays
* Math
* Color
* Scales
* SVG
* Time
* Layouts
* Geography
* Geometry
* Behaviors

=== Maths ===
* Generation of pseudorandom numbers with [[Normal distribution|normal]], [[Log-normal distribution|log-normal]], [[Bates distribution|Bates]], and [[Irwin–Hall distribution|Irwin-Hall]] distributions.
* Transformations in 2D: [[Translation (geometry)|translation]], [[Rotation (mathematics)|rotation]], skew, and scaling.

=== Arrays ===
D3.js array operations are built to complement existing array support in JavaScript (mutator methods: sort, reverse, splice, shift and unshift; accessor methods: concat, join, slice, indexOf and lastIndexOf; iteration methods: filter, every, forEach, map, some, reduce and reduceRight). D3.js extends this functionality with:
* Functions for finding minimum, maximum, extent, sum, mean, median, and quantile of an array.
* Functions for ordering, shuffling, permuting, merging, and bisecting arrays.
* Functions for nesting arrays.
* Functions for manipulating associative arrays.
* Support for map and set collections.

=== Geometry ===
* Computing convex hull of a set of points.
* Computing Voronoi tesselation of a set of points.
* Support for point quadtree data structure.
* Support for basic operations on polygon.

=== Color ===
* Support for RGB, HSL, HCL, and L*a*b* color representation.
* Brightening, darkening, and interpolation of colors.

== Similar tools and libraries ==
* [[AnyChart]]
* [[Datacopia]]
* [[gnuplot]]
* [[Matlab]]
* [[Matplotlib]]
* [[Plotly]]
* [[Processing (programming language)|Processing]]
* [[Qlik]]
* [[R (programming language)|R]]
* [[Raphaël (JavaScript library)|Raphaël]]
* [[SAS (software)|SAS]]
* [[Tableau Software]]
* [[Zoomdata]]

==References==
{{Reflist}}

==Further reading==
''Background on data visualization and information graphics:''
* {{citation |first1=Andy |last1=Kirk |title=Data Visualization: a successful design process |edition=1st |date=December 2012 |publisher=[[Packt Publishing]] |place=Birmingham |isbn=978-1-84969-346-2 |url=http://www.packtpub.com/data-visualization-a-successful-design-process/book }}
* {{citation |first1=Alberto |last1=Cairo |title=The Functional Art |edition=1st |date=August 2012 |publisher=[[Peachpit]] |place=Berkeley |isbn=978-0321834737 |url=http://www.thefunctionalart.com/ }}
''Background on D3.js itself:''
* {{citation |first1=Michael |last1=Bostock |first2=Vadim |last2=Ogievetsky |first3=Jeffrey |last3=Heer |title=D3: Data-Driven Documents |journal=IEEE Transactions on Visualization and Computer Graphics |date=October 2011 |publisher=[[IEEE Press]] |url=http://vis.stanford.edu/papers/d3 |volume=17 |issue=12 |pages=2301–2309 |doi=10.1109/TVCG.2011.185 |pmid=22034350}}
''Using D3.js - beginner level:''
* {{citation |first1=Scott |last1=Murray |title=Interactive Data Visualization for the Web, An Introduction to Designing with D3 |edition=1st |date=March 2013 |publisher=[[O’Reilly Media]] |place=Sebastopol, California |isbn=978-1-4493-3973-9 |url=http://shop.oreilly.com/product/0636920026938.do }}
* {{citation |first1=Simon |last1=Timms |title=Social Data Visualization with HTML5 and JavaScript |edition=1st |date=September 2013 |publisher=[[Packt Publishing]] |place=Birmingham |isbn=978-1-7821-6654-2 |url=http://www.packtpub.com/social-data-visualization-with-html5-and-javascript/book }}
''Using D3.js - intermediate level:''
* {{citation |first1=Mike |last1=Dewar |title=Getting Started with D3 |series=Creating Data-Driven Documents |edition=1st |editor1-first=Julie |editor1-last=Steele |editor2-first=Meghan |editor2-last=Blanchette |date=June 2012 |publisher=[[O’Reilly Media]] |place=Sebastopol, California |isbn=978-1-4493-2879-5 |url=https://books.google.com/books?id=-1Zk213nXsYC }}
* {{citation |first1=Nick |last1=Qi Zhu |title=Data Visualization with D3.js Cookbook |edition=1st |date=October 2013 |publisher=[[Packt Publishing]] |place=Birmingham |isbn=978-1-7821-6216-2 |url=http://www.packtpub.com/data-visualization-with-d3-js-cookbook/book }}
''Others''
* {{cite book|last1=Newton|first1=Thomas|last2=Villareal|first2=Oscar|title=Learning D3.js Mapping|date=2014|publisher=Packt Publishing|isbn=9781783985609|page=126|url=https://www.packtpub.com/web-development/learning-d3js-mapping}}
* {{citation |url=https://www.packtpub.com/web-development/mastering-d3js|title=Mastering D3.js|first=Pablo|last=Navarro Castillo|year=2014|publisher=[[Packt Publishing]] |place=Birmingham |isbn=9781783286270|page=352}}
* {{citation |url=https://www.packtpub.com/web-development/data-visualization-d3js|title=Data Visualization with d3.js|first=Swizec|last=Teller|year=2013|publisher=[[Packt Publishing]] |place=Birmingham |isbn=9781782160007|page=194}}
* {{citation |url=https://www.packtpub.com/web-development/learning-d3js-mapping|title=Learning D3.js Mapping|first1=Thomas|last1=Newton|first2=Oscar|last2=Villarreal|year=2014|publisher=[[Packt Publishing]] |place=Birmingham |isbn=9781783985609|page=126}}
* {{citation |url=http://shop.oreilly.com/product/9781939902023.do|title=Developing a D3.js Edge: Constructing Reusable D3 Components and Charts|first=Christophe|last=Viau|year=2013|publisher=[[Bleeding Edge Press]] |isbn=9781939902023|page=268}}
* {{citation |url=http://www.amazon.com/D3-js-Action-Elijah-Meeks/dp/1617292117/ref=sr_1_1?ie=UTF8&qid=1409163691&sr=8-1&keywords=elijah+meek|title=D3.js in Action|first=Elijah|last=Meeks|year=2014|publisher=[[Manning Publications]] |isbn=9781617292118|page=325}}
* {{citation |url=https://leanpub.com/D3-Tips-and-Tricks|title=D3 Tips and Tricks|first=Malcolm|last=Maclean|year=2014|publisher=[[Leanpub]] |page=580}}
* {{citation |url=http://www.informit.com/store/visual-storytelling-with-d3-an-introduction-to-data-9780321933171|title=Visual Storytelling with D3: An Introduction to Data Visualization in JavaScript|first=Ritchie|last=King|year=2014|publisher=[[Addison-Wesley Data & Analytics Series]] |page=288}}
Videos
* {{citation |first1=Nikhil |last1=Gopal |title=D3 and CoffeeScript: A Python Programmer's Introduction to Web Visualizations |date=October 2014 |publisher=[[O’Reilly Media]] |place=Sebastopol, California |url=http://shop.oreilly.com/product/110000663.do }}
* {{citation |first1=Ritchie |last1=King |title=D3 Visualization LiveLessons: An Introduction to Data Visualization in JavaScript |date= December 2014 |publisher=[[Addison-Wesley Professional]] |url=http://www.informit.com/store/d3-visualization-livelessons-an-introduction-to-data-9780134087139 }}

==External links==
{{Commons category|D3.js}}
* {{official website|d3js.org}}
* [https://github.com/mbostock/d3/wiki/Gallery/ D3.js Gallery]
* [http://bl.ocksplorer.org Blocksplorer], search for blocks by methods used

{{Use mdy dates|date=September 2012}}

[[Category:Free software programmed in JavaScript]]
[[Category:JavaScript libraries]]
[[Category:JavaScript visualization toolkits]]
[[Category:Software using the BSD license]]
[[Category:Visualization API]]

